// This program implements the Groebner Basis Rewrite algorithm found in:
//
// “Formal verification of integer multipliers by combining grobner basiswith logic reduction”,
// 2016 Design, Automation Test in EuropeConference Exhibition (DATE)
//
// Algorithm 1 Grobner Basis Rewriting (GB-Rew)
//
// Input: Variables V, Circuit Model G notes: V is
// Output: Model G_n rewritten wrt V
//  1. for g_i (belongs to) G do /* in reverse order of leading monomials */
//  2.    lv <- lm(g_i)
//  3.    r <- g_i - lv
//  4.    while Vars(r) (not set of) V do
//  5.        Choose v_t (belongs to) Vars(r)
//  6.        Choose g_t (belongs to) G st lm(g_t) = v_t
//  7.        r <- Spoly(r, g_t)
//  8.        r <- XOR-AND-Rule(r)
//  9.    end while
// 10.   g_i <- r + lv
// 11. end for
// 12. G_n <- UpdateModel(G, V) /* remove polynomials whoose leading terms are not in V */
// 13. return G_n
//
// Algorithm 2 Logic Reduction Rewriting
//
// Input: Specification Polynomial p_spec, Circuit Model G
// Output: Circuit Model G
// 1. V <- XORRewritingVariables(G)
// 2. G <- GB-Rew(V, G)
// 3. V <- CommonRewritingVariables(G)
// 4. G <- GB-Rew(V, G)
// 5. return G

// Import library for spoly function
LIB "teachstd.lib";
LIB "polylib.lib";

proc maxdeg (def id)
"USAGE:   maxdeg(id);  id  poly/ideal/vector/module/matrix
RETURN:  int/intmat, each component equals maximal degree of monomials in the
         corresponding component of id, independent of ring ordering
         (maxdeg of each var is 1).
         Of type int, if id is of type poly; of type intmat otherwise
SEE ALSO: maxdeg1
EXAMPLE: example maxdeg; shows examples
"
{
   //-------- subprocedure to find maximal degree of given component ----------
   proc findmaxdeg
   {
      poly c = #[1];
      if (c==0) { return(-1); }
   //--- guess upper 'o' and lower 'u' bound, in case of negative weights -----
      int d = (deg(c)>=0)*deg(c)-(deg(c)<0)*deg(c);
      int i = d;
      while ( c-jet(c,i) != 0 ) { i = 2*(i+1); }
      int o = i-1;
      int u = (d != i)*((i div  2)-1);
   //----------------------- "quick search" for maxdeg ------------------------
      while ( (c-jet(c,i)==0)*(c-jet(c,i-1)!=0) == 0)
      {
         i = (o+1+u) div  2;
         if (c-jet(c,i)!=0) { u = i+1; }
         else { o = i-1; }
      }
      return(i);
   }
//------------------------------ main program ---------------------------------
   matrix M = matrix(id);
   int r,c = nrows(M), ncols(M); int i,j;
   intmat m[r][c];
   for (i=r; i>0; i--)
   {
      for (j=c; j>0; j--) { m[i,j] = findmaxdeg(M[i,j]); }
   }
   if (typeof(id)=="poly") { return(m[1,1]); }
   return(m);
}

////////////////////
//// GATE TYPES ////
////////////////////

// z = ~a => g := -z + 1 - a
// z = a*b => g := -z + a*b
// z = a + b => g := -z + a + b - a*b
// z = XOR(a,b) => g := -z + a + b - 2*a*b

///////////////////
//// FUNCTIONS ////
///////////////////

// Use function to determine if polynomial expression represents an XOR gate and return variables
proc XOR_IDENT (poly g)
{
    ideal vars = variables(g);
    if (size(vars) != 3)
    {
        return(ideal());
    }
    else
    {
        int XOR_check = (g == -vars[1] + vars[2] + vars[3] -2*vars[2]*vars[3]);
        if (XOR_check)
        {
            return(vars);
        }
        else
        {
            return(ideal());
        }
    }
}

// Use function to determine is gate is an XOR gate and return logic 1 or 0
proc XOR_CHECK (poly g)
{
    ideal vars = variables(g);
    if (size(vars) != 3)
    {
        return(0);
    }
    else
    {
        return(g == -vars[1] + vars[2] + vars[3] -2*vars[2]*vars[3]);
    }
}

// Use function to determine if polynomial is an AND gate and return variables
proc AND_IDENT (poly g)
{
    ideal vars = variables(g);
    if (size(vars) != 3)
    {
        return(ideal());
    }
    else
    {
        int AND_check = (g == -vars[1] + vars[2]*vars[3]);
        if (AND_check)
        {
            return(vars);
        }
        else
        {
            return(ideal());
        }
    }
}

// Use function to determine if polynomial is an AND gate and return logic 1 or 0
proc AND_CHECK (poly g)
{
    ideal vars = variables(g);
    if (size(vars) != 3)
    {
        return(0);
    }
    else
    {
        return(g == -vars[1] + vars[2]*vars[3]);
    }
}

// Use function to determine if polynomial is an INV gate and return logic 1 or 0
proc INV_CHECK (poly g)
{
    ideal vars = variables(g);
    if (size(vars) != 2)
    {
        return(0);
    }
    else
    {
        return(1);
    }
}

// Determines if r shares variables contained in ideal V
proc VARS_NOT_IN_V (poly r, ideal V)
{
    int size_r = size(variables(r));
    int size_V = size(V);
    int logic = 0;
    for (int i = 1; i <= size_r; i = i + 1)
    {
        for (int j = 1; j <= size_V; j = j + 1)
        {
            logic = logic + (variables(r)[i] == variables(V)[j]);
        }
    }
    if (logic != size_r)
    {
        return(1);
    }
    else
    {
        return(0);
    }
}

proc CHOOSE_VT (poly r, ideal V)
{
    int size_g = size(variables(r));
    int size_V = size(V);
    intvec logic;
    for (int i = 1; i <= size_g; i = i + 1)
    {
        int not_found = 1;
        for (int j = 1; j <= size_V; j = j + 1)
        {
            if(variables(r)[i] == variables(V)[j])
            {
              not_found = 0;
            }
        }
        if (not_found == 1)
        {
            return(variables(r)[i]);
            break;
        }
    }
    printf("VT of 0");
    variables(r)[1];
    return(variables(r)[1]);
}

// Finds gt in G such that leadmonom(gt) = vt
proc CHOOSE_GT (poly vt, ideal G)
{
    int size_G = size(G);
    for (int i = 1; i <= size_G; i = i + 1)
    {
        if (vt == leadmonom(G[i]))
        {
            return(G[i]);
        }
    }
    printf("Returning 0 because it was not found");
    return(0);
}

// Used between steps to ensure variable with powers greater than 1 are reduced to 1
proc POWER_REDUCE (poly r)
{
    ideal monomials;
    poly lv;
    number lc;
    while(1)
    {
        lv = leadmonom(r);
        lc = leadcoef(r);
        monomials = monomials, lc*lv;
        r = r - lc*lv;
        if (r != 0)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    poly r_reduced;
    int i_max = ncols(monomials);
    for (int i = 2; i <= i_max; i = i + 1)
    {
        int size_vars = size(variables(monomials[i]));
        int maxdeg_mon = maxdeg(monomials[i]);
        if (size_vars != maxdeg_mon)
        {
            for (int j = 1; j <= size_vars; j = j + 1)
            {
                poly v = variables(monomials[i])[j];
                poly p = v^2 - v;
                monomials[i] = spoly(monomials[i], p);
            }
        }
        r_reduced = r_reduced + monomials[i];
    }
    return(r_reduced);
}

// Repeats Spoly until vt is removed from r
// Note, this is not used in the code, but was used in the past
proc SPOLY_REPEAT (poly vt, poly r, poly gt)
{
    int INV_check = INV_CHECK(gt);
    if (INV_check)
    {
        gt = gt -  1;
    }
    ideal monomials;
    poly lv;
    number lc;
    while(1)
    {
        lv = leadmonom(r);
        lc = leadcoef(r);
        monomials = monomials, lc*lv;
        r = r - lc*lv;
        if (r != 0)
        {
            continue;
        }
        else
        {
            break;
        }
    }
    poly r_new;
    poly poly_monomial;
    int i_max = ncols(monomials);
    for (int i = 2; i <= i_max; i = i + 1)
    {
        poly_monomial = monomials[i];
        ideal poly_vars = variables(poly_monomial);
        number poly_sign = leadcoef(poly_monomial);
        int num_vars = size(poly_vars);
        int logic = 0;
        for (int j = 1; j <= num_vars; j = j + 1)
        {
            logic = logic + (vt == poly_vars[j]);
        }
        if (logic != 0) //vt exists in term
        {
            if (INV_check and (num_vars > 2))
            {
                poly vars_add = poly_vars[2];
                for (k = 3; k <= num_vars; k = k + 1)
                {
                    vars_add = vars_add * poly_vars[k];
                }
                poly_monomial = spoly(poly_monomial, gt) + poly_sign * vars_add;
            }
            if (INV_check)
            {
                poly_monomial = spoly(poly_monomial, gt) + poly_sign * poly_vars[2];
            }
            else
            {
                poly_monomial = spoly(poly_monomial, gt);
            }
            poly_monomial = POWER_REDUCE(poly_monomial);
        }
        r_new = r_new + poly_monomial;
    }
    return(r_new);
}

// proc identify monomials that are multiplied together,
// check function used in power reduce, max degree
proc find_multipliers(poly g)
{
  list v;
  int v_ind = 1;
  int i_size = size(g);
  for(int i = 1; i <= i_size; i = i + 1)
  {
    if(maxdeg(g[i]) > 1)
    {
      v[v_ind] = g[i];
      v_ind = v_ind + 1;
    }
  }
  return(v);
}

// proc to search for
proc find_matching(poly f, poly g, ideal G)
{
  poly f1 = CHOOSE_GT(f, G);
  poly g1 = CHOOSE_GT(g, G);
  if(XOR_CHECK(f1) && AND_CHECK(g1))
  {
    ideal f1_vars = XOR_IDENT(f1);
    ideal g1_vars = AND_IDENT(g1);
    if(f1_vars[2] == g1_vars[2] && f1_vars[3] == g1_vars[3])
    {
      return(1);
    }
  }
  else
  {
    if(XOR_CHECK(g1) && AND_CHECK(f1))
    {
      ideal f1_vars = AND_IDENT(f1);
      ideal g1_vars = XOR_IDENT(g1);
      if(f1_vars[2] == g1_vars[2] && f1_vars[3] == g1_vars[3])
      {
        return(1);
      }
    }
  }
  //May want to update this to actually check deeper, but this should be good for now
  return(0);
}

proc XOR_AND_RULE (poly g, ideal G)
{
  list l = find_multipliers(g);
  int l_size = size(l);
  poly f = g;

  for(int i = 1; i <= l_size; i = i + 1)
  {
    int should_break = 0;
    ideal vs = variables(l[i]);
    int var_size = size(vs);
    for(int j = 1; j <= var_size; j = j + 1)
    {
      for(int k = j + 1; k <= var_size; k = k + 1)
      {
        if(find_matching(vs[j], vs[k], G))
        {
          f = f - l[i];
          should_break = 1;
          break;
        }
      }
      if(should_break == 1)
      {
        break;
      }
    }
  }
  return(f);
}

proc V_XOR_PRIMARY (ideal G, ideal primary)
{
    ideal V;
    int size_G = ncols(G);
    for (int i = 1; i <= size_G; i = i + 1)
    {
        V = V + XOR_IDENT(G[i]);
    }
    V = V + primary;
    return(V);
}

proc GB_REW (ideal G, ideal primary)
{
    ideal V = V_XOR_PRIMARY(G, primary);
    int size_G = ncols(G);
    for (int i = size_G; i >= 1; i = i - 1)
    {
        poly lv = leadmonom(G[i]);
        number lc = leadcoef(G[i]);
        poly r = G[i] - lc*lv;
        while (VARS_NOT_IN_V(r, V))
        {
            poly vt = CHOOSE_VT(r, V);
            poly gt = CHOOSE_GT(vt, G);
            r = spoly(r, gt);
            r = POWER_REDUCE(r);
            r = XOR_AND_RULE(r, G);
            if (VARS_NOT_IN_V(r, V))
            {
                break;
            }
        }
        G[i] = r + lc*lv;
    }
    ideal Gn;
    int size_V = ncols(V);
    for(int i = 1; i <= size_G; i = i + 1)
    {
      for(int j = 1; j < size_V; j = j + 1)
      {
        if(variables(G[i])[1] == V[j])
        {
          Gn = Gn + G[i];
          break;
        }
      }
    }
    return(Gn);
}

ideal Gn = GB_REW(G, primary);
Gn;
if(reduce(fspec, Gn + J0) == 0)
{
  printf("The spec is a member of the GB");
}
else
{
  printf("The spec is invalid");
}
quit;
